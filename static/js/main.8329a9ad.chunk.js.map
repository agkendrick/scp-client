{"version":3,"sources":["calcService.js","SeachSelector.js","Search.js","App.js","serviceWorker.js","index.js"],"names":["getCalculations","searchType","searchInput","axios","get","SearchSelector","searchBy","changeSearchType","type","name","value","checked","onChange","Search","setLastSearched","setCalculations","useState","input","setInput","setSearchBy","setSearchField","inputType","txt","newState","submit","a","searchString","alert","lat","lon","data","mean","median","mode","message","zip","city","coordinates","Fragment","target","onClick","formatLastSearched","searchValue","text","App","calculations","lastSearched","useEffect","console","log","className","join","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.8329a9ad.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst getCalculations = (searchType, searchInput) => {\r\n    return axios.get(`https://pacific-bayou-21723.herokuapp.com/search/${searchType}/${searchInput}`);\r\n}\r\n\r\nexport default getCalculations;","import React from 'react';\r\n\r\nconst SearchSelector = ({ searchBy, changeSearchType }) => {\r\n    return (\r\n        <div>\r\n            <label>City</label>\r\n            <input type=\"radio\" name=\"searchType\" value=\"city\" checked={ searchBy === 'city'} onChange={changeSearchType} />\r\n            <label>ZIP Code</label>\r\n            <input type=\"radio\" name=\"searchType\" value=\"zip\" checked={ searchBy === 'zip'} onChange={changeSearchType} />\r\n            <label>Coordinates</label>\r\n            <input type=\"radio\" name=\"searchType\" value=\"coordinates\" checked={ searchBy === 'coordinates'} onChange={changeSearchType} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SearchSelector;","import React, { useState } from 'react';\r\nimport getCalculations from './calcService';\r\nimport SearchSelector from './SeachSelector';\r\n\r\nconst Search = ({ setLastSearched, setCalculations }) => {\r\n\r\n    const [input, setInput] = useState({'zip': '', 'city': '', 'coordinates': ['', '']});\r\n    const [searchBy, setSearchBy] = useState('city');\r\n\r\n    const setSearchField = (inputType, txt) => {\r\n        \r\n        const newState = {...input};\r\n\r\n        switch(inputType) {\r\n            case 'city':\r\n                newState[inputType] = txt;\r\n                setInput(newState);\r\n                break;\r\n            case 'zip':\r\n                newState[inputType] = txt;\r\n                setInput(newState);\r\n                break;\r\n            case 'lat':\r\n                newState['coordinates'][0] = txt;\r\n                setInput(newState);\r\n                break;\r\n            case 'lon':\r\n                newState['coordinates'][1] = txt;\r\n                setInput(newState);\r\n                break;\r\n            default:\r\n        }\r\n    }\r\n\r\n    const submit = async () => {\r\n        try {\r\n            let searchString = input[searchBy];\r\n\r\n            if(!searchString)\r\n                return alert('Missing input!');\r\n\r\n            if(searchBy === 'coordinates') {\r\n                const [lat, lon] = input[searchBy];\r\n\r\n                if(!lat || !lon)\r\n                    return alert('Missing input!');\r\n\r\n                searchString = `${input[searchBy][0]}:${input[searchBy][1]}`;\r\n            }\r\n\r\n            const { data: { mean, median, mode } } = await getCalculations(searchBy, searchString);\r\n            setCalculations([mean, median, mode]);\r\n            setLastSearched([searchBy , input[searchBy]]);\r\n          }\r\n          catch(e)\r\n          {\r\n            alert('Error setting calculations: ' + e.message);\r\n          }\r\n    }\r\n\r\n    const changeSearchType = ({ target: { value } }) => setSearchBy(value);\r\n\r\n    const { zip, city, coordinates } = input;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <h3>Search By</h3>\r\n            <SearchSelector searchBy={ searchBy } changeSearchType={ changeSearchType } />\r\n            <div>\r\n                { searchBy === 'city' && \r\n                    <div>\r\n                        <input type=\"text\" value={ city } onChange={ ({target: { value }}) => setSearchField( 'city', value) } />\r\n                    </div> \r\n                }\r\n                { searchBy === 'zip' && \r\n                    <div>\r\n                        <input type=\"text\" value={ zip } onChange={ ({target: { value }}) => setSearchField( 'zip', value) } />\r\n                    </div> \r\n                }\r\n                { searchBy === 'coordinates' && \r\n                    <div>\r\n                        <label>Latitude: </label>\r\n                        <input type=\"text\" value={ coordinates[0] } onChange={ ({target: { value }}) => setSearchField( 'lat', value) } />\r\n                        <label>Longitude: </label>\r\n                        <input type=\"text\" value={ coordinates[1] } onChange={ ({target: { value }}) => setSearchField( 'lon', value) } />\r\n                    </div>\r\n                }\r\n                <button onClick={ submit }>Search!</button>\r\n            </div>\r\n        </React.Fragment>\r\n    )  \r\n}\r\n\r\nexport default Search;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Search from './Search';\nimport getCalculations from './calcService';\n\nfunction App() {\n\n  const [calculations, setCalculations] = useState(null);\n  const [lastSearched, setLastSearched] = useState(['', ''])\n\n  useEffect(() => {\n    \n    (async () => {\n      try {\n        const { data: { mean, median, mode } } = await getCalculations('coordinates', '30.2240897:-92.01984270000003');\n        setCalculations([mean, median, mode]);\n        setLastSearched(['coordinates' , ['30.2240897', '-92.01984270000003']]);\n      }\n      catch(e)\n      {\n        console.log('Error setting calculations: ' + e.message);\n        throw e;\n      }\n    })();\n\n  }, []);\n  \n  return (\n    <div className=\"App\">\n      { calculations && \n        <React.Fragment>\n          <div>\n            <h1>Showing calculations for </h1>{ formatLastSearched(lastSearched) }\n          </div>\n          <div>\n            <h1>Mean:</h1> { calculations[0] }\n          </div>\n          <div>\n            <h1>Median:</h1> { calculations[1] }\n          </div>\n          <div>\n            <h1>Mode(s):</h1> { calculations[2].join(', ') }\n          </div>\n        </React.Fragment>\n      }\n      <Search setLastSearched={ setLastSearched } setCalculations={ setCalculations } />\n    </div>\n  );\n}\n\nconst formatLastSearched = ([searchType, searchValue]) => {\n  let text = '';\n  switch(searchType) {\n    case 'city':\n      text = `City: ${searchValue}`;\n      break;\n    case 'zip':\n      text = `ZIP Code: ${searchValue}`;\n      break;\n    case 'coordinates':\n      text = `Lat: ${searchValue[0]} Lon: ${searchValue[1]}`;\n        break;\n    default:\n  }\n\n  return `${text}`;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}